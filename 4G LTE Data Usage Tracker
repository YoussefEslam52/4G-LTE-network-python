import time
import subprocess
import argparse
import csv
import logging
import os
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
import sqlite3

# Set up GPIO for the LCD display
import RPi.GPIO as GPIO
from RPLCD.gpio import CharLCD


def read_data_usage(device):
    """Reads the data usage information from the specified modem device."""
    cmd = 'AT+CGACT=1,1'
    subprocess.check_output(['sudo', 'qmicli', '-d', device, '--wds-start-network'])
    subprocess.check_output(['sudo', 'qmicli', '-d', device, '--nas-get-signal-strength'])
    result = subprocess.check_output(['sudo', 'qmicli', '-d', device, '--wds-get-packet-service-statistics']).decode()
    rx_bytes = int(result.split('RX bytes: ')[1].split('\n')[0])
    tx_bytes = int(result.split('TX bytes: ')[1].split('\n')[0])
    return (rx_bytes, tx_bytes)


def display_usage(lcd, provider, network_type, ip_address, rx_bytes, tx_bytes):
    """Displays the data usage information on the specified LCD."""
    lcd.clear()
    lcd.write_string('Provider: {}\n'.format(provider))
    lcd.write_string('Network: {}\n'.format(network_type))
    lcd.write_string('IP: {}\n'.format(ip_address))
    lcd.write_string('Received: {} bytes\n'.format(rx_bytes))
    lcd.write_string('Transmitted: {} bytes\n'.format(tx_bytes))


def write_usage_to_csv(file_name, rx_bytes, tx_bytes):
    """Writes the data usage information to the specified CSV file."""
    csv_file_exists = os.path.isfile(file_name)
    with open(file_name, 'a') as csv_file:
        fieldnames = ['timestamp', 'rx_bytes', 'tx_bytes']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        if not csv_file_exists:
            writer.writeheader()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        writer.writerow({'timestamp': timestamp, 'rx_bytes': rx_bytes, 'tx_bytes': tx_bytes})


def log_usage_to_database(db_file, rx_bytes, tx_bytes):
    """Logs the data usage information to the specified SQLite database."""
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS data_usage (timestamp TEXT, rx_bytes INTEGER, tx_bytes INTEGER)')
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('INSERT INTO data_usage (timestamp, rx_bytes, tx_bytes) VALUES (?, ?, ?)', (timestamp, rx_bytes, tx_bytes))
    connection.commit()
    connection.close()


def send_alert(email_address, email_password, recipient, subject, message):
    """Sends an email alert to the specified recipient."""
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(email_address, email_password)
    msg = MIMEText(message)
    msg['From'] = email_address
    msg['To'] = recipient
    msg['Subject'] = subject
    server.sendmail(email_address, recipient, msg.as_string())
    server.quit()


if __name__ == '__main__':
    # Set up command-line arguments
    parser = argparse.ArgumentParser(description='4G Data Usage Tracker')
    parser.add_argument('device', help='the device name for the 4G modem (e.g. /dev/ttyUSB0)')
    parser.add_argument('--csv', dest='csv_file', default='data_usage.csv', help='the name of the CSV file to write data usage to')
    parser.add_argument('--db', dest='db_file', default='data_usage.db', help='the name of the SQLite database to log data usage to')
    parser.add_argument('--email', dest='email_address', help='the email address to use for alerts')
    parser.add_argument('--password', dest='email_password', help='the password to use for email alerts')
    parser.add_argument('--recipient', dest='recipient', help='the email address to send alerts to')
    parser.add_argument('--threshold', dest='threshold', type=int, default=1000000000, help='the data usage threshold for alerts')
    parser.add_argument('--lcd', dest='lcd_enabled', action='store_true', help='enable LCD display output')
    args = parser.parse_args()

    # Set up GPIO for the LCD display
    if args.lcd_enabled:
        lcd = CharLCD(pin_rs=37, pin_rw=None, pin_e=35, pins_data=[33, 31, 29, 23], numbering_mode=GPIO.BOARD)

    while True:
        # Read the data usage information
        provider = subprocess.check_output(['sudo', 'qmicli', '-d', args.device, '--nas-get-home-network']).decode().split(',')[2]
        network_type = subprocess.check_output(['sudo', 'qmicli', '-d', args.device, '--nas-get-system-information']).decode().split(',')[6]
        ip_address = subprocess.check_output(['sudo', 'qmicli', '-d', args.device, '--wds-get-current-settings']).decode().split(',')[8]
        rx_bytes, tx_bytes = read_data_usage(args.device)

        # Display the data usage information
        if args.lcd_enabled:
            display_usage(lcd, provider, network_type, ip_address, rx_bytes, tx_bytes)

        # Write the data usage information to a CSV file
        write_usage_to_csv(args.csv_file, rx_bytes, tx_bytes)

        # Log the data usage information to a database
        log_usage_to_database(args.db_file, rx_bytes, tx_bytes)

        # Send an email alert if the data usage is above the threshold
        total_bytes = rx_bytes + tx_bytes
        if args.email_address and args.email_password and args.recipient and total_bytes > args.threshold:
            message = 'Data usage is above threshold: {} bytes'.format(total_bytes)
            send_alert(args.email_address, args.email_password, args.recipient, '4G Data Usage Alert', message)

        # Wait for 1 minute before measuring again
        time.sleep(60)
        
